services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-stemuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
      POSTGRES_DB: ${POSTGRES_DB:-stemsdb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER:-stemuser}:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/${POSTGRES_DB:-stemsdb}
      - REDIS_URL=redis://redis:6379/0
      - API_KEY=${API_KEY:-change-this-secure-key}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-2}
    volumes:
      - ./jobs:/app/jobs
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python worker.py
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER:-stemuser}:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/${POSTGRES_DB:-stemsdb}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./jobs:/app/jobs
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    restart: unless-stopped

  # Optional: Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

volumes:
  postgres_data:

networks:
  default:
    name: stem-separation-network